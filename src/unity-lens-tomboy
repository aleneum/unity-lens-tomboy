#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Simple lens allowing quick access to Tomboy notes"""

from gi.repository import Unity, Gio, GObject

CATEGORY_ALL = 0
DBUS_NAME = 'com.github.aleneum.Tomboy'
DBUS_PATH = '/com/github/aleneum/Tomboy'
DBUS_NAME_FLAG_DO_NOT_QUEUE = 0x4

def get_dbus_object(address, path, interface):
    """Simple DBus helper to retrieve a dbus object, given its address, path and
    interface"""
    session_bus_connection = Gio.bus_get_sync (Gio.BusType.SESSION, None)
    return Gio.DBusProxy.new_sync (
        session_bus_connection, 0, None,
        address, path, interface, None,
    )

class TomboyScope(Unity.Scope):
    def __init__ (self):
        super(TomboyScope, self).__init__ (dbus_path=DBUS_PATH)

        self.connect ('search-changed', self._on_search_changed)
        #self.connect ('notify::active-global-search', self._on_global_search_changed)
        self.connect ('activate-uri', self.activate_uri)

        self.tomboy = get_dbus_object(
            'org.gnome.Tomboy',
            '/org/gnome/Tomboy/RemoteControl',
            'org.gnome.Tomboy.RemoteControl',
        )
        self.icon = Gio.ThemedIcon.new('tomboy').to_string()

    def activate_uri (self, scope, uri):
        """Displays the selected note"""
        if not uri.startswith("note://"):
          uri = self.tomboy.CreateNamedNote('(s)',uri)
        self.tomboy.DisplayNote('(s)',uri)
        return Unity.ActivationResponse.new(Unity.HandledType.HIDE_DASH, uri)

    def _on_search_changed (self, scope, search, search_type, cancellable):
        s = search.props.search_string.strip()
        self._update_results_model(
            s,
            search.props.results_model,
        )
        if len(s) > 0:
          search.props.results_model.append(
            s,
            "add",
            CATEGORY_ALL,
            'application/x-desktop',
            "Create Note '%s''" % s,
            '',
            "",
          )
          search.finished()

    def _on_global_search_changed (self, scope, search, search_type, cancellable):
        self._update_results_model(
            self.props.active_global_search.props.search_string,
            scope.props.global_results_model,
        )
        search.finished()

    def _update_results_model (self, search_string, model):
        model.clear ()
        for note_uri in self.tomboy.SearchNotes('(sb)', search_string, False):
            model.append(
                note_uri,
                self.icon,
                CATEGORY_ALL,
                'application/x-desktop',
                self.tomboy.GetNoteTitle('(s)', note_uri),
                '',
                note_uri,
            )

def main():
    """Main entry point"""
    session_bus = get_dbus_object(
        'org.freedesktop.DBus',
        '/org/freedesktop/DBus',
        'org.freedesktop.DBus',
    )
    session_bus.RequestName('(su)', DBUS_NAME, DBUS_NAME_FLAG_DO_NOT_QUEUE)

    tomboy_lens = Unity.Lens.new(DBUS_PATH, 'sample')
    tomboy_lens.props.search_hint = 'Search for Tomboy notes'
    tomboy_lens.props.visible = True
    tomboy_lens.props.search_in_global = False
    tomboy_lens.props.categories = [
        Unity.Category.new(
            'Tomboy notes',
            Gio.ThemedIcon.new('tomboy'),
            Unity.CategoryRenderer.VERTICAL_TILE,
        ),
    ]
    tomboy_lens.props.filters = []
    tomboy_lens.add_local_scope(TomboyScope())
    tomboy_lens.export ()

    GObject.MainLoop().run()

if __name__ == '__main__':
    main()

